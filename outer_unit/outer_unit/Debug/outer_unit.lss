
outer_unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000490  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00000490  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000160e  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a93  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c0d  00000000  00000000  00002799  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  000033a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fe  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ad3  00000000  00000000  00003b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3d       	cpi	r26, 0xD0	; 208
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ed       	ldi	r26, 0xD0	; 208
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  8a:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeyPadInit>:
	_delay_ms(1000);
}

void KeyPadInit(void)
{
	SETBIT(DDRC,DDC3);
  92:	a3 9a       	sbi	0x14, 3	; 20
	SETBIT(DDRC,DDC4);
  94:	a4 9a       	sbi	0x14, 4	; 20
	SETBIT(DDRC,DDC5); // DDRC|=0x38; //0b 0011 1000
  96:	a5 9a       	sbi	0x14, 5	; 20
	
    PULLUP(DDRC,PORTC,PC0);
  98:	a0 98       	cbi	0x14, 0	; 20
  9a:	a8 9a       	sbi	0x15, 0	; 21
	PULLUP(DDRC,PORTC,PC1);
  9c:	a1 98       	cbi	0x14, 1	; 20
  9e:	a9 9a       	sbi	0x15, 1	; 21
	PULLUP(DDRC,PORTC,PC2);
  a0:	a2 98       	cbi	0x14, 2	; 20
  a2:	aa 9a       	sbi	0x15, 2	; 21
  a4:	08 95       	ret

000000a6 <Get_Key>:
}

unsigned char Get_Key()

{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
		SETBIT(PORTC,PC3);
		SETBIT(PORTC,PC4);
		SETBIT(PORTC,PC5);//PORTC|=0x38;
		for(i=PC3;i<PC6;i++)
		{
			CLRBIT(PORTC,i);
  b2:	ee 24       	eor	r14, r14
  b4:	e3 94       	inc	r14
  b6:	f1 2c       	mov	r15, r1

{
	while(1)
	{
		int i=PC3;
		SETBIT(PORTC,PC3);
  b8:	ab 9a       	sbi	0x15, 3	; 21
		SETBIT(PORTC,PC4);
  ba:	ac 9a       	sbi	0x15, 4	; 21
		SETBIT(PORTC,PC5);//PORTC|=0x38;
  bc:	ad 9a       	sbi	0x15, 5	; 21
		for(i=PC3;i<PC6;i++)
  be:	03 e0       	ldi	r16, 0x03	; 3
  c0:	10 e0       	ldi	r17, 0x00	; 0
		{
			CLRBIT(PORTC,i);
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	e7 01       	movw	r28, r14
  c6:	00 2e       	mov	r0, r16
  c8:	02 c0       	rjmp	.+4      	; 0xce <Get_Key+0x28>
  ca:	cc 0f       	add	r28, r28
  cc:	dd 1f       	adc	r29, r29
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <Get_Key+0x24>
  d2:	9c 2f       	mov	r25, r28
  d4:	90 95       	com	r25
  d6:	89 23       	and	r24, r25
  d8:	85 bb       	out	0x15, r24	; 21
			unsigned char state;
			state =(PORTC&0x38);
  da:	85 b3       	in	r24, 0x15	; 21
			switch (state)
  dc:	88 73       	andi	r24, 0x38	; 56
  de:	88 32       	cpi	r24, 0x28	; 40
  e0:	81 f1       	breq	.+96     	; 0x142 <Get_Key+0x9c>
  e2:	80 33       	cpi	r24, 0x30	; 48
  e4:	21 f0       	breq	.+8      	; 0xee <Get_Key+0x48>
  e6:	88 31       	cpi	r24, 0x18	; 24
  e8:	09 f0       	breq	.+2      	; 0xec <Get_Key+0x46>
  ea:	7f c0       	rjmp	.+254    	; 0x1ea <Get_Key+0x144>
  ec:	54 c0       	rjmp	.+168    	; 0x196 <Get_Key+0xf0>
			{
				case 0x30:
				if(ReadBit(PINC,PINC0)==0)
  ee:	83 b3       	in	r24, 0x13	; 19
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
  f6:	81 11       	cpse	r24, r1
  f8:	08 c0       	rjmp	.+16     	; 0x10a <Get_Key+0x64>
				{
					while(ReadBit(PINC,PINC0)==0);
  fa:	83 b3       	in	r24, 0x13	; 19
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 102:	88 23       	and	r24, r24
 104:	d1 f3       	breq	.-12     	; 0xfa <Get_Key+0x54>
					return '1';
 106:	81 e3       	ldi	r24, 0x31	; 49
 108:	7a c0       	rjmp	.+244    	; 0x1fe <Get_Key+0x158>
				}
				else if(ReadBit(PINC,PINC1)==0)
 10a:	83 b3       	in	r24, 0x13	; 19
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 112:	81 11       	cpse	r24, r1
 114:	08 c0       	rjmp	.+16     	; 0x126 <Get_Key+0x80>
				{
					while(ReadBit(PINC,PINC1)==0);
 116:	83 b3       	in	r24, 0x13	; 19
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 11e:	88 23       	and	r24, r24
 120:	d1 f3       	breq	.-12     	; 0x116 <Get_Key+0x70>
					return '4';
 122:	84 e3       	ldi	r24, 0x34	; 52
 124:	6c c0       	rjmp	.+216    	; 0x1fe <Get_Key+0x158>
				}
				else if(ReadBit(PINC,PINC2)==0)
 126:	83 b3       	in	r24, 0x13	; 19
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 12e:	81 11       	cpse	r24, r1
 130:	5c c0       	rjmp	.+184    	; 0x1ea <Get_Key+0x144>
				{
					while(ReadBit(PINC,PINC2)==0);
 132:	83 b3       	in	r24, 0x13	; 19
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 13a:	88 23       	and	r24, r24
 13c:	d1 f3       	breq	.-12     	; 0x132 <Get_Key+0x8c>
					return '7';
 13e:	87 e3       	ldi	r24, 0x37	; 55
 140:	5e c0       	rjmp	.+188    	; 0x1fe <Get_Key+0x158>
				}

				break;
				case 0x28:

				if(ReadBit(PINC,PINC0)==0)
 142:	83 b3       	in	r24, 0x13	; 19
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 14a:	81 11       	cpse	r24, r1
 14c:	08 c0       	rjmp	.+16     	; 0x15e <Get_Key+0xb8>
				{
					while(ReadBit(PINC,PINC0)==0);
 14e:	83 b3       	in	r24, 0x13	; 19
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 156:	88 23       	and	r24, r24
 158:	d1 f3       	breq	.-12     	; 0x14e <Get_Key+0xa8>
					return '2';
 15a:	82 e3       	ldi	r24, 0x32	; 50
 15c:	50 c0       	rjmp	.+160    	; 0x1fe <Get_Key+0x158>
				}
				else if(ReadBit(PINC,PINC1)==0)
 15e:	83 b3       	in	r24, 0x13	; 19
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 166:	81 11       	cpse	r24, r1
 168:	08 c0       	rjmp	.+16     	; 0x17a <Get_Key+0xd4>
				{
					while(ReadBit(PINC,PINC1)==0);
 16a:	83 b3       	in	r24, 0x13	; 19
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 172:	88 23       	and	r24, r24
 174:	d1 f3       	breq	.-12     	; 0x16a <Get_Key+0xc4>
					return '5';
 176:	85 e3       	ldi	r24, 0x35	; 53
 178:	42 c0       	rjmp	.+132    	; 0x1fe <Get_Key+0x158>
				}
				else if(ReadBit(PINC,PINC2)==0)
 17a:	83 b3       	in	r24, 0x13	; 19
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 182:	81 11       	cpse	r24, r1
 184:	32 c0       	rjmp	.+100    	; 0x1ea <Get_Key+0x144>
				{
					while(ReadBit(PINC,PINC2)==0);
 186:	83 b3       	in	r24, 0x13	; 19
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 18e:	88 23       	and	r24, r24
 190:	d1 f3       	breq	.-12     	; 0x186 <Get_Key+0xe0>
					return '8';
 192:	88 e3       	ldi	r24, 0x38	; 56
 194:	34 c0       	rjmp	.+104    	; 0x1fe <Get_Key+0x158>

				case 0x18:
				// 0001 1000
				//0x 1 8

				if(ReadBit(PINC,PINC0)==0)
 196:	83 b3       	in	r24, 0x13	; 19
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 19e:	81 11       	cpse	r24, r1
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <Get_Key+0x10c>
				{
					while(ReadBit(PINC,PINC0)==0);
 1a2:	83 b3       	in	r24, 0x13	; 19
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 1aa:	88 23       	and	r24, r24
 1ac:	d1 f3       	breq	.-12     	; 0x1a2 <Get_Key+0xfc>
					return '3';
 1ae:	83 e3       	ldi	r24, 0x33	; 51
 1b0:	26 c0       	rjmp	.+76     	; 0x1fe <Get_Key+0x158>
				}
				else if(ReadBit(PINC,PINC1)==0)
 1b2:	83 b3       	in	r24, 0x13	; 19
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 1ba:	81 11       	cpse	r24, r1
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <Get_Key+0x128>
				{
					while(ReadBit(PINC,PINC1)==0);
 1be:	83 b3       	in	r24, 0x13	; 19
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 1c6:	88 23       	and	r24, r24
 1c8:	d1 f3       	breq	.-12     	; 0x1be <Get_Key+0x118>
					return '6';
 1ca:	86 e3       	ldi	r24, 0x36	; 54
 1cc:	18 c0       	rjmp	.+48     	; 0x1fe <Get_Key+0x158>
				}
				else if(ReadBit(PINC,PINC2)==0)
 1ce:	83 b3       	in	r24, 0x13	; 19
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 1d6:	81 11       	cpse	r24, r1
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <Get_Key+0x144>
				{
					while(ReadBit(PINC,PINC2)==0);
 1da:	83 b3       	in	r24, 0x13	; 19
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	0e 94 3e 02 	call	0x47c	; 0x47c <ReadBit>
 1e2:	88 23       	and	r24, r24
 1e4:	d1 f3       	breq	.-12     	; 0x1da <Get_Key+0x134>
					return '9';
 1e6:	89 e3       	ldi	r24, 0x39	; 57
 1e8:	0a c0       	rjmp	.+20     	; 0x1fe <Get_Key+0x158>
				}

				break;

			}
			SETBIT(PORTC,i);
 1ea:	85 b3       	in	r24, 0x15	; 21
 1ec:	c8 2b       	or	r28, r24
 1ee:	c5 bb       	out	0x15, r28	; 21
	{
		int i=PC3;
		SETBIT(PORTC,PC3);
		SETBIT(PORTC,PC4);
		SETBIT(PORTC,PC5);//PORTC|=0x38;
		for(i=PC3;i<PC6;i++)
 1f0:	0f 5f       	subi	r16, 0xFF	; 255
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
 1f4:	06 30       	cpi	r16, 0x06	; 6
 1f6:	11 05       	cpc	r17, r1
 1f8:	09 f0       	breq	.+2      	; 0x1fc <Get_Key+0x156>
 1fa:	63 cf       	rjmp	.-314    	; 0xc2 <Get_Key+0x1c>
 1fc:	5d cf       	rjmp	.-326    	; 0xb8 <Get_Key+0x12>
			}
			SETBIT(PORTC,i);
		}
	}
	return 0;
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	08 95       	ret

0000020c <UART_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	1b b8       	out	0x0b, r1	; 11
 20e:	53 9a       	sbi	0x0a, 3	; 10
 210:	54 9a       	sbi	0x0a, 4	; 10
 212:	86 e8       	ldi	r24, 0x86	; 134
 214:	80 bd       	out	0x20, r24	; 32
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	89 b9       	out	0x09, r24	; 9
 21a:	08 95       	ret

0000021c <UART_SEND>:
 21c:	5d 9b       	sbis	0x0b, 5	; 11
 21e:	fe cf       	rjmp	.-4      	; 0x21c <UART_SEND>
 220:	8c b9       	out	0x0c, r24	; 12
 222:	08 95       	ret

00000224 <UART_RECIEVE>:
 224:	5f 9b       	sbis	0x0b, 7	; 11
 226:	fe cf       	rjmp	.-4      	; 0x224 <UART_RECIEVE>
 228:	2c b1       	in	r18, 0x0c	; 12
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
 22e:	08 95       	ret

00000230 <pulse>:
 230:	da 9a       	sbi	0x1b, 2	; 27
 232:	da 98       	cbi	0x1b, 2	; 27
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <pulse+0x6>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <pulse+0xc>
 23c:	08 95       	ret

0000023e <send4Command>:
 23e:	cf 93       	push	r28
 240:	c8 2f       	mov	r28, r24
 242:	d8 98       	cbi	0x1b, 0	; 27
 244:	d9 98       	cbi	0x1b, 1	; 27
 246:	8b b3       	in	r24, 0x1b	; 27
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	9c 2f       	mov	r25, r28
 24c:	90 7f       	andi	r25, 0xF0	; 240
 24e:	89 2b       	or	r24, r25
 250:	8b bb       	out	0x1b, r24	; 27
 252:	0e 94 18 01 	call	0x230	; 0x230 <pulse>
 256:	8f e9       	ldi	r24, 0x9F	; 159
 258:	9f e0       	ldi	r25, 0x0F	; 15
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <send4Command+0x1c>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <send4Command+0x22>
 260:	00 00       	nop
 262:	8b b3       	in	r24, 0x1b	; 27
 264:	28 2f       	mov	r18, r24
 266:	2f 70       	andi	r18, 0x0F	; 15
 268:	30 e1       	ldi	r19, 0x10	; 16
 26a:	c3 9f       	mul	r28, r19
 26c:	c0 01       	movw	r24, r0
 26e:	11 24       	eor	r1, r1
 270:	82 2b       	or	r24, r18
 272:	8b bb       	out	0x1b, r24	; 27
 274:	0e 94 18 01 	call	0x230	; 0x230 <pulse>
 278:	8f e9       	ldi	r24, 0x9F	; 159
 27a:	9f e0       	ldi	r25, 0x0F	; 15
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <send4Command+0x3e>
 280:	00 c0       	rjmp	.+0      	; 0x282 <send4Command+0x44>
 282:	00 00       	nop
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <init4>:
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	8a bb       	out	0x1a, r24	; 26
 28c:	83 e3       	ldi	r24, 0x33	; 51
 28e:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
 292:	82 e3       	ldi	r24, 0x32	; 50
 294:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
 298:	88 e2       	ldi	r24, 0x28	; 40
 29a:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
 29e:	8e e0       	ldi	r24, 0x0E	; 14
 2a0:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <init4+0x26>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <init4+0x2c>
 2b4:	00 00       	nop
 2b6:	08 95       	ret

000002b8 <sendData>:
 2b8:	cf 93       	push	r28
 2ba:	c8 2f       	mov	r28, r24
 2bc:	d8 9a       	sbi	0x1b, 0	; 27
 2be:	d9 98       	cbi	0x1b, 1	; 27
 2c0:	8b b3       	in	r24, 0x1b	; 27
 2c2:	8f 70       	andi	r24, 0x0F	; 15
 2c4:	9c 2f       	mov	r25, r28
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	89 2b       	or	r24, r25
 2ca:	8b bb       	out	0x1b, r24	; 27
 2cc:	0e 94 18 01 	call	0x230	; 0x230 <pulse>
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <sendData+0x1c>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <sendData+0x22>
 2da:	00 00       	nop
 2dc:	8b b3       	in	r24, 0x1b	; 27
 2de:	28 2f       	mov	r18, r24
 2e0:	2f 70       	andi	r18, 0x0F	; 15
 2e2:	30 e1       	ldi	r19, 0x10	; 16
 2e4:	c3 9f       	mul	r28, r19
 2e6:	c0 01       	movw	r24, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	82 2b       	or	r24, r18
 2ec:	8b bb       	out	0x1b, r24	; 27
 2ee:	0e 94 18 01 	call	0x230	; 0x230 <pulse>
 2f2:	8f e9       	ldi	r24, 0x9F	; 159
 2f4:	9f e0       	ldi	r25, 0x0F	; 15
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <sendData+0x3e>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <sendData+0x44>
 2fc:	00 00       	nop
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <print>:
	_delay_ms(2);
}


void print(char* word)
{
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	fc 01       	movw	r30, r24
	unsigned char i=0;
	
	while(word[i]!=0)
 30a:	80 81       	ld	r24, Z
 30c:	88 23       	and	r24, r24
 30e:	59 f0       	breq	.+22     	; 0x326 <print+0x24>
 310:	8f 01       	movw	r16, r30
 312:	c0 e0       	ldi	r28, 0x00	; 0
	{
		sendData(word[i]);
 314:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <sendData>
		i++;
 318:	cf 5f       	subi	r28, 0xFF	; 255

void print(char* word)
{
	unsigned char i=0;
	
	while(word[i]!=0)
 31a:	f8 01       	movw	r30, r16
 31c:	ec 0f       	add	r30, r28
 31e:	f1 1d       	adc	r31, r1
 320:	80 81       	ld	r24, Z
 322:	81 11       	cpse	r24, r1
 324:	f7 cf       	rjmp	.-18     	; 0x314 <print+0x12>
	{
		sendData(word[i]);
		i++;
	}
}
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <keyinput>:
unsigned char keyinput()
{	
	unsigned char keyin=0;
	while(1)
	{
		keyin=Get_Key();
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <Get_Key>
		if(keyin!=0)
 332:	88 23       	and	r24, r24
 334:	e1 f3       	breq	.-8      	; 0x32e <keyinput>
		return keyin-48;
	}
	
 336:	80 53       	subi	r24, 0x30	; 48
 338:	08 95       	ret

0000033a <main>:
void UART_RECIEVE(unsigned char *data);

unsigned char keyinput();

int main(void)
{	
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
	init4();
 344:	0e 94 44 01 	call	0x288	; 0x288 <init4>
	UART_INIT();
 348:	0e 94 06 01 	call	0x20c	; 0x20c <UART_INIT>
	KeyPadInit();
 34c:	0e 94 49 00 	call	0x92	; 0x92 <KeyPadInit>
	unsigned char reset=0;
	
	/* Replace with your application code */
	while (1)
	{	
		flag=0;
 350:	19 82       	std	Y+1, r1	; 0x01
		send4Command(0x01);//clear LCD
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
		print("enter password");
 358:	80 e6       	ldi	r24, 0x60	; 96
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 81 01 	call	0x302	; 0x302 <print>
		send4Command(0xC0);//new line
 360:	80 ec       	ldi	r24, 0xC0	; 192
 362:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
		
		pass[0]=keyinput();
 366:	0e 94 97 01 	call	0x32e	; 0x32e <keyinput>
 36a:	f8 2e       	mov	r15, r24
		sendData(pass[0]+48);
 36c:	80 e3       	ldi	r24, 0x30	; 48
 36e:	8f 0d       	add	r24, r15
 370:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <sendData>
		pass[1]=keyinput();
 374:	0e 94 97 01 	call	0x32e	; 0x32e <keyinput>
 378:	08 2f       	mov	r16, r24
		sendData(pass[1]+48);
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	80 0f       	add	r24, r16
 37e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <sendData>
		pass[2]=keyinput();
 382:	0e 94 97 01 	call	0x32e	; 0x32e <keyinput>
 386:	18 2f       	mov	r17, r24
		sendData(pass[2]+48);
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	81 0f       	add	r24, r17
 38c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <sendData>
		
		UART_SEND(pass[0]);
 390:	8f 2d       	mov	r24, r15
 392:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_SEND>
		UART_SEND(pass[1]);
 396:	80 2f       	mov	r24, r16
 398:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_SEND>
		UART_SEND(pass[2]);
 39c:	81 2f       	mov	r24, r17
 39e:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_SEND>
		
		UART_RECIEVE(&flag);
 3a2:	ce 01       	movw	r24, r28
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	0e 94 12 01 	call	0x224	; 0x224 <UART_RECIEVE>
		
		if(flag==1)
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <main+0x78>
 3b0:	5d c0       	rjmp	.+186    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		{
			send4Command(0x01);//clear LCD
 3b2:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
			print("1.open	");
 3b6:	8f e6       	ldi	r24, 0x6F	; 111
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 81 01 	call	0x302	; 0x302 <print>
			print("2.close");
 3be:	87 e7       	ldi	r24, 0x77	; 119
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 81 01 	call	0x302	; 0x302 <print>
			send4Command(0XC0);
 3c6:	80 ec       	ldi	r24, 0xC0	; 192
 3c8:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
			print("3.reset password");
 3cc:	8f e7       	ldi	r24, 0x7F	; 127
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 81 01 	call	0x302	; 0x302 <print>
			
			choise=keyinput();
 3d4:	0e 94 97 01 	call	0x32e	; 0x32e <keyinput>
 3d8:	18 2f       	mov	r17, r24
			UART_SEND(choise);
 3da:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_SEND>
			
			switch(choise)
 3de:	12 30       	cpi	r17, 0x02	; 2
 3e0:	61 f0       	breq	.+24     	; 0x3fa <main+0xc0>
 3e2:	13 30       	cpi	r17, 0x03	; 3
 3e4:	91 f0       	breq	.+36     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3e6:	11 30       	cpi	r17, 0x01	; 1
 3e8:	c9 f5       	brne	.+114    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			{
				case(1):
					send4Command(0x01);//clear LCD
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
					print("open door");
 3f0:	80 e9       	ldi	r24, 0x90	; 144
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 81 01 	call	0x302	; 0x302 <print>
					break;
 3f8:	ab cf       	rjmp	.-170    	; 0x350 <main+0x16>
				case(2):
					send4Command(0x01);//clear LCD
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
					print("close door");
 400:	8a e9       	ldi	r24, 0x9A	; 154
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 81 01 	call	0x302	; 0x302 <print>
					break;
 408:	a3 cf       	rjmp	.-186    	; 0x350 <main+0x16>
				case(3):
					send4Command(0X01);//clear LCD
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
					print("enter new pass");
 410:	85 ea       	ldi	r24, 0xA5	; 165
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 81 01 	call	0x302	; 0x302 <print>
					send4Command(0xC0);//new line
 418:	80 ec       	ldi	r24, 0xC0	; 192
 41a:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
					reset=keyinput();
 41e:	0e 94 97 01 	call	0x32e	; 0x32e <keyinput>
 422:	18 2f       	mov	r17, r24
					sendData(reset+48);
 424:	80 e3       	ldi	r24, 0x30	; 48
 426:	81 0f       	add	r24, r17
 428:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <sendData>
					UART_SEND(reset);
 42c:	81 2f       	mov	r24, r17
 42e:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_SEND>
					reset=keyinput();
 432:	0e 94 97 01 	call	0x32e	; 0x32e <keyinput>
 436:	18 2f       	mov	r17, r24
					sendData(reset+48);
 438:	80 e3       	ldi	r24, 0x30	; 48
 43a:	81 0f       	add	r24, r17
 43c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <sendData>
					UART_SEND(reset);
 440:	81 2f       	mov	r24, r17
 442:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_SEND>
					reset=keyinput();
 446:	0e 94 97 01 	call	0x32e	; 0x32e <keyinput>
 44a:	18 2f       	mov	r17, r24
					sendData(reset+48);
 44c:	80 e3       	ldi	r24, 0x30	; 48
 44e:	81 0f       	add	r24, r17
 450:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <sendData>
					UART_SEND(reset);
 454:	81 2f       	mov	r24, r17
 456:	0e 94 0e 01 	call	0x21c	; 0x21c <UART_SEND>
					break;
 45a:	7a cf       	rjmp	.-268    	; 0x350 <main+0x16>
					
				default:
					send4Command(0X01);//clear LCD
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
					print("wrong entry");
 462:	84 eb       	ldi	r24, 0xB4	; 180
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 81 01 	call	0x302	; 0x302 <print>
					break;	
 46a:	72 cf       	rjmp	.-284    	; 0x350 <main+0x16>
			
		}
		
		else
		{
			send4Command(0x01);//clear LCD
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 1f 01 	call	0x23e	; 0x23e <send4Command>
			print("wrong password");
 472:	80 ec       	ldi	r24, 0xC0	; 192
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 81 01 	call	0x302	; 0x302 <print>
 47a:	6a cf       	rjmp	.-300    	; 0x350 <main+0x16>

0000047c <ReadBit>:
 *  Author: RI-5RQ7TW2
 */ 
#include "MCAL.h"

unsigned char ReadBit(unsigned char REG,unsigned char BIT)
{
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <ReadBit+0x8>
 480:	95 95       	asr	r25
 482:	87 95       	ror	r24
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <ReadBit+0x4>
	}
	else
	{
		return 0;
	}
}
 488:	81 70       	andi	r24, 0x01	; 1
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
