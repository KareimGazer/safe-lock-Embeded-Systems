
inner_unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000124a  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089a  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000091e  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000025c  00000000  00000000  00002a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f3  00000000  00000000  00002ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000740  00000000  00000000  000031d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00003917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  64:	0c 94 4c 02 	jmp	0x498	; 0x498 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEPROM_Init>:
 */ 

#include "External_EEPROM.h"

void EEPROM_Init(void){
	TWI_Init(); // just intialize the TWI(I2C) module inside the MC
  6c:	0e 94 2b 02 	call	0x456	; 0x456 <TWI_Init>
  70:	08 95       	ret

00000072 <EEPROM_Write_Byte>:
}

unsigned char EEPROM_Write_Byte(unsigned short u16addr, unsigned char u8data)
{
  72:	1f 93       	push	r17
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	ec 01       	movw	r28, r24
  7a:	16 2f       	mov	r17, r22
    TWI_Start();
  7c:	0e 94 32 02 	call	0x464	; 0x464 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
  80:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
  84:	88 30       	cpi	r24, 0x08	; 8
  86:	09 f5       	brne	.+66     	; 0xca <EEPROM_Write_Byte+0x58>
	address all bytes 11 bits addressing is used	
    24Cxx chips have four high bit fixed ID which his 0b1010 lower three
    bits are used for addressing chip memory
	write the device address and so we need to get A8 A9 A10 address 
	bits and R/W=0 (write)*/
	TWI_Write(0xA0 | (unsigned char)((u16addr & 0x0700)>>7));// 1010 1110 
  88:	ce 01       	movw	r24, r28
  8a:	88 27       	eor	r24, r24
  8c:	97 70       	andi	r25, 0x07	; 7
  8e:	88 0f       	add	r24, r24
  90:	89 2f       	mov	r24, r25
  92:	88 1f       	adc	r24, r24
  94:	99 0b       	sbc	r25, r25
  96:	91 95       	neg	r25
  98:	80 6a       	ori	r24, 0xA0	; 160
  9a:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
  9e:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
  a2:	88 31       	cpi	r24, 0x18	; 24
  a4:	a1 f4       	brne	.+40     	; 0xce <EEPROM_Write_Byte+0x5c>
        return ERROR; 
		 
    //send the required location address
    TWI_Write((unsigned char)(u16addr));// word address
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
  ac:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
  b0:	88 32       	cpi	r24, 0x28	; 40
  b2:	79 f4       	brne	.+30     	; 0xd2 <EEPROM_Write_Byte+0x60>
        return ERROR;
		
    //write byte to eeprom
    TWI_Write(u8data);
  b4:	81 2f       	mov	r24, r17
  b6:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
  ba:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
  be:	88 32       	cpi	r24, 0x28	; 40
  c0:	51 f4       	brne	.+20     	; 0xd6 <EEPROM_Write_Byte+0x64>
        return ERROR;
		
    TWI_Stop();
  c2:	0e 94 38 02 	call	0x470	; 0x470 <TWI_Stop>
	
    return SUCCESS;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	07 c0       	rjmp	.+14     	; 0xd8 <EEPROM_Write_Byte+0x66>

unsigned char EEPROM_Write_Byte(unsigned short u16addr, unsigned char u8data)
{
    TWI_Start();
    if (TWI_Get_Status() != TW_START)
        return ERROR;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <EEPROM_Write_Byte+0x66>
    bits are used for addressing chip memory
	write the device address and so we need to get A8 A9 A10 address 
	bits and R/W=0 (write)*/
	TWI_Write(0xA0 | (unsigned char)((u16addr & 0x0700)>>7));// 1010 1110 
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
        return ERROR; 
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <EEPROM_Write_Byte+0x66>
		 
    //send the required location address
    TWI_Write((unsigned char)(u16addr));// word address
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
        return ERROR;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <EEPROM_Write_Byte+0x66>
		
    //write byte to eeprom
    TWI_Write(u8data);
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
        return ERROR;
  d6:	80 e0       	ldi	r24, 0x00	; 0
		
    TWI_Stop();
	
    return SUCCESS;
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	08 95       	ret

000000e0 <EEPROM_Read_Byte>:

unsigned char EEPROM_Read_Byte(unsigned short u16addr, unsigned char *u8data)
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
  ee:	8b 01       	movw	r16, r22
    TWI_Start();
  f0:	0e 94 32 02 	call	0x464	; 0x464 <TWI_Start>
    if (TWI_Get_Status() != TW_START)
  f4:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	91 f5       	brne	.+100    	; 0x160 <EEPROM_Read_Byte+0x80>
        return ERROR;
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((0xA0) | ((unsigned char)((u16addr & 0x0700)>>7)));
  fc:	7e 01       	movw	r14, r28
  fe:	ee 24       	eor	r14, r14
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	f8 22       	and	r15, r24
 104:	ee 0c       	add	r14, r14
 106:	ef 2c       	mov	r14, r15
 108:	ee 1c       	adc	r14, r14
 10a:	ff 08       	sbc	r15, r15
 10c:	f1 94       	neg	r15
 10e:	8e 2d       	mov	r24, r14
 110:	80 6a       	ori	r24, 0xA0	; 160
 112:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
 116:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
 11a:	88 31       	cpi	r24, 0x18	; 24
 11c:	19 f5       	brne	.+70     	; 0x164 <EEPROM_Read_Byte+0x84>
        return ERROR;
		
    //send the required location address
    TWI_Write((unsigned char)(u16addr));// word address 
 11e:	8c 2f       	mov	r24, r28
 120:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
 124:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
 128:	88 32       	cpi	r24, 0x28	; 40
 12a:	f1 f4       	brne	.+60     	; 0x168 <EEPROM_Read_Byte+0x88>
        return ERROR;
		
    //send a repeated start
    TWI_Start();
 12c:	0e 94 32 02 	call	0x464	; 0x464 <TWI_Start>
    if (TWI_Get_Status() != TW_REP_START)
 130:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
 134:	80 31       	cpi	r24, 0x10	; 16
 136:	d1 f4       	brne	.+52     	; 0x16c <EEPROM_Read_Byte+0x8c>
        return ERROR;
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
    TWI_Write((0xA0) | ((unsigned char)((u16addr & 0x0700)>>7))|1);
 138:	8e 2d       	mov	r24, r14
 13a:	81 6a       	ori	r24, 0xA1	; 161
 13c:	0e 94 3b 02 	call	0x476	; 0x476 <TWI_Write>
    if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
 140:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
 144:	80 34       	cpi	r24, 0x40	; 64
 146:	a1 f4       	brne	.+40     	; 0x170 <EEPROM_Read_Byte+0x90>
        return ERROR;
		
    *u8data = TWI_Read_With_NACK();
 148:	0e 94 42 02 	call	0x484	; 0x484 <TWI_Read_With_NACK>
 14c:	f8 01       	movw	r30, r16
 14e:	80 83       	st	Z, r24
    if (TWI_Get_Status() != TW_MR_DATA_NACK)
 150:	0e 94 49 02 	call	0x492	; 0x492 <TWI_Get_Status>
 154:	88 35       	cpi	r24, 0x58	; 88
 156:	71 f4       	brne	.+28     	; 0x174 <EEPROM_Read_Byte+0x94>
        return ERROR;
		
    TWI_Stop();
 158:	0e 94 38 02 	call	0x470	; 0x470 <TWI_Stop>
    return SUCCESS;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0b c0       	rjmp	.+22     	; 0x176 <EEPROM_Read_Byte+0x96>

unsigned char EEPROM_Read_Byte(unsigned short u16addr, unsigned char *u8data)
{
    TWI_Start();
    if (TWI_Get_Status() != TW_START)
        return ERROR;
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	09 c0       	rjmp	.+18     	; 0x176 <EEPROM_Read_Byte+0x96>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=0 (write)
    TWI_Write((0xA0) | ((unsigned char)((u16addr & 0x0700)>>7)));
    if (TWI_Get_Status() != TW_MT_SLA_W_ACK)
        return ERROR;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	07 c0       	rjmp	.+14     	; 0x176 <EEPROM_Read_Byte+0x96>
		
    //send the required location address
    TWI_Write((unsigned char)(u16addr));// word address 
    if (TWI_Get_Status() != TW_MT_DATA_ACK)
        return ERROR;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	05 c0       	rjmp	.+10     	; 0x176 <EEPROM_Read_Byte+0x96>
		
    //send a repeated start
    TWI_Start();
    if (TWI_Get_Status() != TW_REP_START)
        return ERROR;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	03 c0       	rjmp	.+6      	; 0x176 <EEPROM_Read_Byte+0x96>
		
    //write the device address and so we need to get A8 A9 A10 address bits and R/W=1 (Read)
    TWI_Write((0xA0) | ((unsigned char)((u16addr & 0x0700)>>7))|1);
    if (TWI_Get_Status() != TW_MT_SLA_R_ACK)
        return ERROR;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	01 c0       	rjmp	.+2      	; 0x176 <EEPROM_Read_Byte+0x96>
		
    *u8data = TWI_Read_With_NACK();
    if (TWI_Get_Status() != TW_MR_DATA_NACK)
        return ERROR;
 174:	80 e0       	ldi	r24, 0x00	; 0
		
    TWI_Stop();
    return SUCCESS;
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	08 95       	ret

00000184 <UART_INIT>:
}

int getAngle(int angle)
{
	return ((angle+90)/180)+1;
}
 184:	1b b8       	out	0x0b, r1	; 11
 186:	53 9a       	sbi	0x0a, 3	; 10
 188:	54 9a       	sbi	0x0a, 4	; 10
 18a:	86 e8       	ldi	r24, 0x86	; 134
 18c:	80 bd       	out	0x20, r24	; 32
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	89 b9       	out	0x09, r24	; 9
 192:	08 95       	ret

00000194 <UART_SEND>:
 194:	5d 9b       	sbis	0x0b, 5	; 11
 196:	fe cf       	rjmp	.-4      	; 0x194 <UART_SEND>
 198:	8c b9       	out	0x0c, r24	; 12
 19a:	08 95       	ret

0000019c <UART_RECIEVE>:
 19c:	5f 9b       	sbis	0x0b, 7	; 11
 19e:	fe cf       	rjmp	.-4      	; 0x19c <UART_RECIEVE>
 1a0:	2c b1       	in	r18, 0x0c	; 12
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
 1a6:	08 95       	ret

000001a8 <pulse>:
 1a8:	da 9a       	sbi	0x1b, 2	; 27
 1aa:	da 98       	cbi	0x1b, 2	; 27
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <pulse+0x6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <pulse+0xc>
 1b4:	08 95       	ret

000001b6 <send4Command>:
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
 1ba:	d8 98       	cbi	0x1b, 0	; 27
 1bc:	d9 98       	cbi	0x1b, 1	; 27
 1be:	8b b3       	in	r24, 0x1b	; 27
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	9c 2f       	mov	r25, r28
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	89 2b       	or	r24, r25
 1c8:	8b bb       	out	0x1b, r24	; 27
 1ca:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pulse>
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <send4Command+0x1c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <send4Command+0x22>
 1d8:	00 00       	nop
 1da:	8b b3       	in	r24, 0x1b	; 27
 1dc:	28 2f       	mov	r18, r24
 1de:	2f 70       	andi	r18, 0x0F	; 15
 1e0:	30 e1       	ldi	r19, 0x10	; 16
 1e2:	c3 9f       	mul	r28, r19
 1e4:	c0 01       	movw	r24, r0
 1e6:	11 24       	eor	r1, r1
 1e8:	82 2b       	or	r24, r18
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pulse>
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <send4Command+0x3e>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <send4Command+0x44>
 1fa:	00 00       	nop
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <init4>:
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	8a bb       	out	0x1a, r24	; 26
 204:	83 e3       	ldi	r24, 0x33	; 51
 206:	0e 94 db 00 	call	0x1b6	; 0x1b6 <send4Command>
 20a:	82 e3       	ldi	r24, 0x32	; 50
 20c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <send4Command>
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 db 00 	call	0x1b6	; 0x1b6 <send4Command>
 216:	8e e0       	ldi	r24, 0x0E	; 14
 218:	0e 94 db 00 	call	0x1b6	; 0x1b6 <send4Command>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <send4Command>
 222:	8f e9       	ldi	r24, 0x9F	; 159
 224:	9f e0       	ldi	r25, 0x0F	; 15
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <init4+0x26>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <init4+0x2c>
 22c:	00 00       	nop
 22e:	08 95       	ret

00000230 <sendData>:
 230:	cf 93       	push	r28
 232:	c8 2f       	mov	r28, r24
 234:	d8 9a       	sbi	0x1b, 0	; 27
 236:	d9 98       	cbi	0x1b, 1	; 27
 238:	8b b3       	in	r24, 0x1b	; 27
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	9c 2f       	mov	r25, r28
 23e:	90 7f       	andi	r25, 0xF0	; 240
 240:	89 2b       	or	r24, r25
 242:	8b bb       	out	0x1b, r24	; 27
 244:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pulse>
 248:	8f e9       	ldi	r24, 0x9F	; 159
 24a:	9f e0       	ldi	r25, 0x0F	; 15
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <sendData+0x1c>
 250:	00 c0       	rjmp	.+0      	; 0x252 <sendData+0x22>
 252:	00 00       	nop
 254:	8b b3       	in	r24, 0x1b	; 27
 256:	28 2f       	mov	r18, r24
 258:	2f 70       	andi	r18, 0x0F	; 15
 25a:	30 e1       	ldi	r19, 0x10	; 16
 25c:	c3 9f       	mul	r28, r19
 25e:	c0 01       	movw	r24, r0
 260:	11 24       	eor	r1, r1
 262:	82 2b       	or	r24, r18
 264:	8b bb       	out	0x1b, r24	; 27
 266:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pulse>
 26a:	8f e9       	ldi	r24, 0x9F	; 159
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <sendData+0x3e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <sendData+0x44>
 274:	00 00       	nop
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <redLedOn>:
}

void redLedOn()
{

	DDRD|=(1<<PD3);
 27a:	8b 9a       	sbi	0x11, 3	; 17
	PORTD|=(1<<PD3);
 27c:	93 9a       	sbi	0x12, 3	; 18
 27e:	08 95       	ret

00000280 <greenLedOn>:
}


void greenLedOn()
{
	DDRD|=(1<<PD4);
 280:	8c 9a       	sbi	0x11, 4	; 17
	PORTD|=(1<<PD4);
 282:	94 9a       	sbi	0x12, 4	; 18
 284:	08 95       	ret

00000286 <redLedOff>:
}

void redLedOff()
{

	DDRD|=(1<<PD3);
 286:	8b 9a       	sbi	0x11, 3	; 17
	PORTD&=~(1<<PD3);
 288:	93 98       	cbi	0x12, 3	; 18
 28a:	08 95       	ret

0000028c <openServo>:


void openServo()
{
	//intialization
	SET_BIT(SERVO_DDR,SERVO_PIN);
 28c:	8d 9a       	sbi	0x11, 5	; 17
	
	//green led on
	greenLedOn();
 28e:	0e 94 40 01 	call	0x280	; 0x280 <greenLedOn>
	
	redLedOff();
 292:	0e 94 43 01 	call	0x286	; 0x286 <redLedOff>
	
	//giving pulse
	SET_BIT(SERVO_PORT,SERVO_PIN);
 296:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	8f e9       	ldi	r24, 0x9F	; 159
 29a:	9f e0       	ldi	r25, 0x0F	; 15
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <openServo+0x10>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <openServo+0x16>
 2a2:	00 00       	nop
	_delay_ms(2);
	CLR_BIT(SERVO_PORT,SERVO_PIN);
 2a4:	95 98       	cbi	0x12, 5	; 18
 2a6:	8f e3       	ldi	r24, 0x3F	; 63
 2a8:	9c e9       	ldi	r25, 0x9C	; 156
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <openServo+0x1e>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <openServo+0x24>
 2b0:	00 00       	nop
 2b2:	08 95       	ret

000002b4 <greenLedOff>:
}


void greenLedOff()
{
	DDRD|=(1<<PD4);
 2b4:	8c 9a       	sbi	0x11, 4	; 17
	PORTD&=~(1<<PD4);
 2b6:	94 98       	cbi	0x12, 4	; 18
 2b8:	08 95       	ret

000002ba <closeServo>:

void closeServo()
{

	//intialization
	SET_BIT(SERVO_DDR,SERVO_PIN);
 2ba:	8d 9a       	sbi	0x11, 5	; 17
	
	//red led on
	redLedOn();
 2bc:	0e 94 3d 01 	call	0x27a	; 0x27a <redLedOn>
	
	greenLedOff();
 2c0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <greenLedOff>
	
	//giving pulse
	SET_BIT(SERVO_PORT,SERVO_PIN);
 2c4:	95 9a       	sbi	0x12, 5	; 18
	_delay_ms(0);
	CLR_BIT(SERVO_PORT,SERVO_PIN);
 2c6:	95 98       	cbi	0x12, 5	; 18
 2c8:	8f e3       	ldi	r24, 0x3F	; 63
 2ca:	9c e9       	ldi	r25, 0x9C	; 156
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <closeServo+0x12>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <closeServo+0x18>
 2d2:	00 00       	nop
 2d4:	08 95       	ret

000002d6 <main>:
void UART_INIT();
void UART_SEND(unsigned char data);
void UART_RECIEVE(unsigned char *data);

int main(void)
{	
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <main+0x6>
 2dc:	00 d0       	rcall	.+0      	; 0x2de <main+0x8>
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <main+0xa>
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	unsigned char password[3];//password array
	unsigned char value=0;
 2e4:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char checker=0;
	unsigned char operation=0;
 2e6:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char num=1;
	unsigned char memory=0;
 2e8:	1e 82       	std	Y+6, r1	; 0x06
	unsigned char edit=1;
	
	init4();//initialize lcd in 4-bit mode
 2ea:	0e 94 00 01 	call	0x200	; 0x200 <init4>
	UART_INIT();
 2ee:	0e 94 c2 00 	call	0x184	; 0x184 <UART_INIT>
	
	//enable write;
 	DDRC|=(1<<PC2);
 2f2:	a2 9a       	sbi	0x14, 2	; 20
 	//PORTC|=(1<<PC2);
 	EEPROM_Init();
 2f4:	0e 94 36 00 	call	0x6c	; 0x6c <EEPROM_Init>
 	EEPROM_Write_Byte(0X0311,num);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	81 e1       	ldi	r24, 0x11	; 17
 2fc:	93 e0       	ldi	r25, 0x03	; 3
 2fe:	0e 94 39 00 	call	0x72	; 0x72 <EEPROM_Write_Byte>
 	EEPROM_Write_Byte(0X0312,num);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	82 e1       	ldi	r24, 0x12	; 18
 306:	93 e0       	ldi	r25, 0x03	; 3
 308:	0e 94 39 00 	call	0x72	; 0x72 <EEPROM_Write_Byte>
 	EEPROM_Write_Byte(0X0313,num);
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	83 e1       	ldi	r24, 0x13	; 19
 310:	93 e0       	ldi	r25, 0x03	; 3
 312:	0e 94 39 00 	call	0x72	; 0x72 <EEPROM_Write_Byte>

	while(1)
	{
		checker=0;
		//load password in the beging of the cycle
		EEPROM_Read_Byte(0X0311,&password[0]);
 316:	be 01       	movw	r22, r28
 318:	6f 5f       	subi	r22, 0xFF	; 255
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	81 e1       	ldi	r24, 0x11	; 17
 31e:	93 e0       	ldi	r25, 0x03	; 3
 320:	0e 94 70 00 	call	0xe0	; 0xe0 <EEPROM_Read_Byte>
		password[0]=memory+1;
 324:	8e 81       	ldd	r24, Y+6	; 0x06
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_Read_Byte(0X0312,&password[1]);
 32a:	be 01       	movw	r22, r28
 32c:	6e 5f       	subi	r22, 0xFE	; 254
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	82 e1       	ldi	r24, 0x12	; 18
 332:	93 e0       	ldi	r25, 0x03	; 3
 334:	0e 94 70 00 	call	0xe0	; 0xe0 <EEPROM_Read_Byte>
		password[1]=memory+1;
 338:	8e 81       	ldd	r24, Y+6	; 0x06
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	8a 83       	std	Y+2, r24	; 0x02
		EEPROM_Read_Byte(0X313,&password[2]);
 33e:	be 01       	movw	r22, r28
 340:	6d 5f       	subi	r22, 0xFD	; 253
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	83 e1       	ldi	r24, 0x13	; 19
 346:	93 e0       	ldi	r25, 0x03	; 3
 348:	0e 94 70 00 	call	0xe0	; 0xe0 <EEPROM_Read_Byte>
		password[2]=memory+1;
 34c:	8e 81       	ldd	r24, Y+6	; 0x06
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	8b 83       	std	Y+3, r24	; 0x03
		value=0;
		
    while (1) 
    {	
		checker=0;
		value=0;
 352:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char value=0;
	unsigned char checker=0;
	unsigned char operation=0;
	unsigned char num=1;
	unsigned char memory=0;
	unsigned char edit=1;
 354:	aa 24       	eor	r10, r10
 356:	a3 94       	inc	r10
 358:	6e 01       	movw	r12, r28
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	c8 0e       	add	r12, r24
 35e:	d1 1c       	adc	r13, r1
		sendData(password[2]+48);
		
 		int i;
 		for(i=0;i<3;i++)
 		{
 			UART_RECIEVE(&value);
 360:	bc 2c       	mov	r11, r12
 362:	ed 2c       	mov	r14, r13
 364:	1e c0       	rjmp	.+60     	; 0x3a2 <main+0xcc>
		value=0;
		
    while (1) 
    {	
		checker=0;
		value=0;
 366:	1c 82       	std	Y+4, r1	; 0x04
 		 if(edit==0)
 368:	a1 10       	cpse	r10, r1
 36a:	1b c0       	rjmp	.+54     	; 0x3a2 <main+0xcc>
 		 {
			//load password in the beging of the cycle
			EEPROM_Read_Byte(0X0311,&password[0]);
 36c:	be 01       	movw	r22, r28
 36e:	6f 5f       	subi	r22, 0xFF	; 255
 370:	7f 4f       	sbci	r23, 0xFF	; 255
 372:	81 e1       	ldi	r24, 0x11	; 17
 374:	93 e0       	ldi	r25, 0x03	; 3
 376:	0e 94 70 00 	call	0xe0	; 0xe0 <EEPROM_Read_Byte>
			password[0]=memory;
 37a:	8e 81       	ldd	r24, Y+6	; 0x06
 37c:	89 83       	std	Y+1, r24	; 0x01
			EEPROM_Read_Byte(0X0312,&password[1]);
 37e:	be 01       	movw	r22, r28
 380:	6e 5f       	subi	r22, 0xFE	; 254
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	82 e1       	ldi	r24, 0x12	; 18
 386:	93 e0       	ldi	r25, 0x03	; 3
 388:	0e 94 70 00 	call	0xe0	; 0xe0 <EEPROM_Read_Byte>
			password[1]=memory;
 38c:	8e 81       	ldd	r24, Y+6	; 0x06
 38e:	8a 83       	std	Y+2, r24	; 0x02
			EEPROM_Read_Byte(0X313,&password[2]);
 390:	be 01       	movw	r22, r28
 392:	6d 5f       	subi	r22, 0xFD	; 253
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	83 e1       	ldi	r24, 0x13	; 19
 398:	93 e0       	ldi	r25, 0x03	; 3
 39a:	0e 94 70 00 	call	0xe0	; 0xe0 <EEPROM_Read_Byte>
			password[2]=memory;
 39e:	8e 81       	ldd	r24, Y+6	; 0x06
 3a0:	8b 83       	std	Y+3, r24	; 0x03
 		 }
		
		sendData(password[0]+48);
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	80 5d       	subi	r24, 0xD0	; 208
 3a6:	0e 94 18 01 	call	0x230	; 0x230 <sendData>
		sendData(password[1]+48);
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	80 5d       	subi	r24, 0xD0	; 208
 3ae:	0e 94 18 01 	call	0x230	; 0x230 <sendData>
		sendData(password[2]+48);
 3b2:	8b 81       	ldd	r24, Y+3	; 0x03
 3b4:	80 5d       	subi	r24, 0xD0	; 208
 3b6:	0e 94 18 01 	call	0x230	; 0x230 <sendData>
 3ba:	8e 01       	movw	r16, r28
 3bc:	0f 5f       	subi	r16, 0xFF	; 255
 3be:	1f 4f       	sbci	r17, 0xFF	; 255
		password[2]=memory+1;
		value=0;
		
    while (1) 
    {	
		checker=0;
 3c0:	f1 2c       	mov	r15, r1
		sendData(password[2]+48);
		
 		int i;
 		for(i=0;i<3;i++)
 		{
 			UART_RECIEVE(&value);
 3c2:	8b 2d       	mov	r24, r11
 3c4:	9e 2d       	mov	r25, r14
 3c6:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_RECIEVE>
			 if(value==password[i])
 3ca:	f8 01       	movw	r30, r16
 3cc:	91 91       	ld	r25, Z+
 3ce:	8f 01       	movw	r16, r30
 3d0:	8c 81       	ldd	r24, Y+4	; 0x04
 3d2:	98 13       	cpse	r25, r24
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <main+0x102>
			 checker++;
 3d6:	f3 94       	inc	r15
		sendData(password[0]+48);
		sendData(password[1]+48);
		sendData(password[2]+48);
		
 		int i;
 		for(i=0;i<3;i++)
 3d8:	0c 15       	cp	r16, r12
 3da:	1d 05       	cpc	r17, r13
 3dc:	91 f7       	brne	.-28     	; 0x3c2 <main+0xec>
 			UART_RECIEVE(&value);
			 if(value==password[i])
			 checker++;
 		}
		 
		 if(checker==3)
 3de:	f3 e0       	ldi	r31, 0x03	; 3
 3e0:	ff 12       	cpse	r15, r31
 3e2:	33 c0       	rjmp	.+102    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		 {
			 
			 UART_SEND(1);//right password flag
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 ca 00 	call	0x194	; 0x194 <UART_SEND>
			 UART_RECIEVE(&operation);
 3ea:	ce 01       	movw	r24, r28
 3ec:	05 96       	adiw	r24, 0x05	; 5
 3ee:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_RECIEVE>
			 
			 switch(operation)
 3f2:	8d 81       	ldd	r24, Y+5	; 0x05
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	41 f0       	breq	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	49 f0       	breq	.+18     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	b2 cf       	rjmp	.-156    	; 0x366 <main+0x90>
			 {
				case (1):
					openServo();
 402:	0e 94 46 01 	call	0x28c	; 0x28c <openServo>
					break;
 406:	af cf       	rjmp	.-162    	; 0x366 <main+0x90>
				case (2):
					closeServo();
 408:	0e 94 5d 01 	call	0x2ba	; 0x2ba <closeServo>
					break;
 40c:	ac cf       	rjmp	.-168    	; 0x366 <main+0x90>
				case(3):
					UART_RECIEVE(&memory);
 40e:	ce 01       	movw	r24, r28
 410:	06 96       	adiw	r24, 0x06	; 6
 412:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_RECIEVE>
					 EEPROM_Write_Byte(0X0311,memory);
 416:	6e 81       	ldd	r22, Y+6	; 0x06
 418:	81 e1       	ldi	r24, 0x11	; 17
 41a:	93 e0       	ldi	r25, 0x03	; 3
 41c:	0e 94 39 00 	call	0x72	; 0x72 <EEPROM_Write_Byte>
					 UART_RECIEVE(&memory);
 420:	ce 01       	movw	r24, r28
 422:	06 96       	adiw	r24, 0x06	; 6
 424:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_RECIEVE>
					 EEPROM_Write_Byte(0X0312,memory);
 428:	6e 81       	ldd	r22, Y+6	; 0x06
 42a:	82 e1       	ldi	r24, 0x12	; 18
 42c:	93 e0       	ldi	r25, 0x03	; 3
 42e:	0e 94 39 00 	call	0x72	; 0x72 <EEPROM_Write_Byte>
					 UART_RECIEVE(&memory);
 432:	ce 01       	movw	r24, r28
 434:	06 96       	adiw	r24, 0x06	; 6
 436:	0e 94 ce 00 	call	0x19c	; 0x19c <UART_RECIEVE>
					 EEPROM_Write_Byte(0X0313,memory);
 43a:	6e 81       	ldd	r22, Y+6	; 0x06
 43c:	83 e1       	ldi	r24, 0x13	; 19
 43e:	93 e0       	ldi	r25, 0x03	; 3
 440:	0e 94 39 00 	call	0x72	; 0x72 <EEPROM_Write_Byte>
		value=0;
		
    while (1) 
    {	
		checker=0;
		value=0;
 444:	1c 82       	std	Y+4, r1	; 0x04
					 EEPROM_Write_Byte(0X0311,memory);
					 UART_RECIEVE(&memory);
					 EEPROM_Write_Byte(0X0312,memory);
					 UART_RECIEVE(&memory);
					 EEPROM_Write_Byte(0X0313,memory);
					 edit=0;
 446:	a1 2c       	mov	r10, r1
 448:	91 cf       	rjmp	.-222    	; 0x36c <main+0x96>
			 }
		 }
		 
		 else
		 {	
			 UART_SEND(0);//wrong password flag
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 ca 00 	call	0x194	; 0x194 <UART_SEND>
			 closeServo();
 450:	0e 94 5d 01 	call	0x2ba	; 0x2ba <closeServo>
 454:	88 cf       	rjmp	.-240    	; 0x366 <main+0x90>

00000456 <TWI_Init>:
    TWCR = (1 << TWINT) | (1 << TWEN) | (1<<TWEA);
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!(TWCR & (1 << TWINT)));
    // Read Data
    return TWDR;
}
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	80 b9       	out	0x00, r24	; 0
 45a:	11 b8       	out	0x01, r1	; 1
 45c:	82 b9       	out	0x02, r24	; 2
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	86 bf       	out	0x36, r24	; 54
 462:	08 95       	ret

00000464 <TWI_Start>:
 464:	84 ea       	ldi	r24, 0xA4	; 164
 466:	86 bf       	out	0x36, r24	; 54
 468:	06 b6       	in	r0, 0x36	; 54
 46a:	07 fe       	sbrs	r0, 7
 46c:	fd cf       	rjmp	.-6      	; 0x468 <TWI_Start+0x4>
 46e:	08 95       	ret

00000470 <TWI_Stop>:
 470:	84 e9       	ldi	r24, 0x94	; 148
 472:	86 bf       	out	0x36, r24	; 54
 474:	08 95       	ret

00000476 <TWI_Write>:
 476:	83 b9       	out	0x03, r24	; 3
 478:	84 e8       	ldi	r24, 0x84	; 132
 47a:	86 bf       	out	0x36, r24	; 54
 47c:	06 b6       	in	r0, 0x36	; 54
 47e:	07 fe       	sbrs	r0, 7
 480:	fd cf       	rjmp	.-6      	; 0x47c <TWI_Write+0x6>
 482:	08 95       	ret

00000484 <TWI_Read_With_NACK>:
{
	/* Clear the TWINT flag before reading the data TWINT=1
	 * enable sending ACK TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 484:	84 e8       	ldi	r24, 0x84	; 132
 486:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (!(TWCR & (1 << TWINT)));
 488:	06 b6       	in	r0, 0x36	; 54
 48a:	07 fe       	sbrs	r0, 7
 48c:	fd cf       	rjmp	.-6      	; 0x488 <TWI_Read_With_NACK+0x4>
    // Read Data
    return TWDR;
 48e:	83 b1       	in	r24, 0x03	; 3
}
 490:	08 95       	ret

00000492 <TWI_Get_Status>:

unsigned char TWI_Get_Status(void)
{
    unsigned char status;
    status = TWSR & 0xF8; //masking to eliminate first 3 bits 
 492:	81 b1       	in	r24, 0x01	; 1
    return status;
}
 494:	88 7f       	andi	r24, 0xF8	; 248
 496:	08 95       	ret

00000498 <_exit>:
 498:	f8 94       	cli

0000049a <__stop_program>:
 49a:	ff cf       	rjmp	.-2      	; 0x49a <__stop_program>
